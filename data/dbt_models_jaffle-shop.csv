path,name,extension,file_name,sql_code,config,materialized,is_snapshot,has_jinja_code,model_category,vertical,yml_code,tests,has_tests,sql_ids,has_select_all_in_last_select,has_group_by,primary_key,filters,is_filtered,macros,has_macros,parent_models,is_source_model,source,children_models,is_end_model,model_description,jinja_description
models/staging/stg_customers.sql,stg_customers.sql,.sql,,"WITH SOURCE AS
  (SELECT *
   FROM {{ source('ecom', 'raw_customers') }}), renamed AS
  (SELECT ----------  ids
 id AS customer_id, ---------- text
 name AS customer_name
   FROM SOURCE)
SELECT *
FROM renamed",,,False,False,stg,customers,"{'models': [{'name': 'stg_customers', 'description': 'Customer data with basic cleaning and transformation applied, one row per customer.', 'columns': [{'name': 'customer_id', 'description': 'The unique key for each customer.', 'data_tests': ['not_null', 'unique']}]}]}","{'columns': {'customer_id': ['not_null', 'unique']}, 'unit_tests': []}",True,['customer_id'],True,False,customer_id,,False,,False,[],True,['ecom.raw_customers'],['customers'],False,"""Extracts customer data from the 'raw_customers' source table, applying basic transformations. It renames the 'id' field to 'customer_id' and 'name' to 'customer_name', ensuring one row per customer. The model includes data tests for uniqueness and non-null values on 'customer_id'.""",
models/staging/stg_locations.sql,stg_locations.sql,.sql,,"WITH SOURCE AS
  (SELECT *
   FROM {{ source('ecom', 'raw_stores') }}), renamed AS
  (SELECT ----------  ids
 id AS location_id, ---------- text
 name AS location_name, ---------- numerics
 tax_rate, ---------- timestamps
 {{ dbt.date_trunc('day', 'opened_at') }} AS opened_date
   FROM SOURCE)
SELECT *
FROM renamed",,,False,False,stg,locations,"{'models': [{'name': 'stg_locations', 'description': 'List of open locations with basic cleaning and transformation applied, one row per location.', 'columns': [{'name': 'location_id', 'description': 'The unique key for each location.', 'data_tests': ['not_null', 'unique']}]}], 'unit_tests': [{'name': 'test_does_location_opened_at_trunc_to_date', 'description': 'Check that opened_at timestamp is properly truncated to a date.', 'model': 'stg_locations', 'given': [{'input': ""source('ecom', 'raw_stores')"", 'rows': [{'id': 1, 'name': 'Vice City', 'tax_rate': 0.2, 'opened_at': '2016-09-01T00:00:00'}, {'id': 2, 'name': 'San Andreas', 'tax_rate': 0.1, 'opened_at': '2079-10-27T23:59:59.9999'}]}], 'expect': {'rows': [{'location_id': 1, 'location_name': 'Vice City', 'tax_rate': 0.2, 'opened_date': '2016-09-01'}, {'location_id': 2, 'location_name': 'San Andreas', 'tax_rate': 0.1, 'opened_date': '2079-10-27'}]}}]}","{'columns': {'location_id': ['not_null', 'unique']}, 'unit_tests': ['test_does_location_opened_at_trunc_to_date']}",True,['location_id'],True,False,location_id,,False,['dbt.date_trunc'],True,[],True,['ecom.raw_stores'],['locations'],False,"""Extracts a list of open store locations from the 'raw_stores' source table, applying basic transformations. It renames columns for clarity, truncates the 'opened_at' timestamp to a date, and ensures each location has a unique identifier. The output includes location ID, name, tax rate, and opened date.""",
models/staging/stg_order_items.sql,stg_order_items.sql,.sql,,"WITH SOURCE AS
  (SELECT *
   FROM {{ source('ecom', 'raw_items') }}), renamed AS
  (SELECT ----------  ids
 id AS order_item_id,
 order_id,
 sku AS product_id
   FROM SOURCE)
SELECT *
FROM renamed",,,False,False,stg,order_items,"{'models': [{'name': 'stg_order_items', 'description': 'Individual food and drink items that make up our orders, one row per item.', 'columns': [{'name': 'order_item_id', 'description': 'The unique key for each order item.', 'data_tests': ['not_null', 'unique']}, {'name': 'order_id', 'description': 'The corresponding order each order item belongs to', 'data_tests': ['not_null', {'relationships': {'to': ""ref('stg_orders')"", 'field': 'order_id'}}]}]}]}","{'columns': {'order_item_id': ['not_null', 'unique'], 'order_id': ['not_null', {'relationships': {'to': ""ref('stg_orders')"", 'field': 'order_id'}}]}, 'unit_tests': []}",True,"['order_item_id', 'product_id', 'order_id']",True,False,order_item_id,,False,,False,[],True,['ecom.raw_items'],['order_items'],False,"""Selects individual food and drink items from the 'raw_items' source table, renaming fields to 'order_item_id', 'order_id', and 'product_id'. Each row represents a unique order item, ensuring non-null and unique values for 'order_item_id' and establishing a relationship with the 'stg_orders' model via 'order_id'.""",
models/staging/stg_orders.sql,stg_orders.sql,.sql,,"WITH SOURCE AS
  (SELECT *
   FROM {{ source('ecom', 'raw_orders') }}), renamed AS
  (SELECT ----------  ids
 id AS order_id,
 store_id AS location_id,
 customer AS customer_id, ---------- numerics
 subtotal AS subtotal_cents,
 tax_paid AS tax_paid_cents,
 order_total AS order_total_cents, {{ cents_to_dollars('subtotal') }} AS subtotal, {{ cents_to_dollars('tax_paid') }} AS tax_paid, {{ cents_to_dollars('order_total') }} AS order_total, ---------- timestamps
 {{ dbt.date_trunc('day', 'ordered_at') }} AS ordered_at
   FROM SOURCE)
SELECT *
FROM renamed",,,False,False,stg,orders,"{'models': [{'name': 'stg_orders', 'description': 'Order data with basic cleaning and transformation applied, one row per order.', 'data_tests': [{'dbt_utils.expression_is_true': {'expression': 'order_total - tax_paid = subtotal'}}], 'columns': [{'name': 'order_id', 'description': 'The unique key for each order.', 'data_tests': ['not_null', 'unique']}]}]}","{'columns': {'order_id': ['not_null', 'unique']}, 'unit_tests': []}",True,"['location_id', 'store_id', 'customer_id', 'order_id']",True,False,order_id,,False,"['cents_to_dollars', 'dbt.date_trunc']",True,[],True,['ecom.raw_orders'],"['order_items', 'orders']",False,"Retrieves order data from the 'raw_orders' table in the 'ecom' source, applying basic transformations. It renames fields, converts amounts from cents to dollars, and truncates the 'ordered_at' timestamp to the day. The model ensures that the total order amount equals the subtotal plus tax.",
models/staging/stg_products.sql,stg_products.sql,.sql,,"WITH SOURCE AS
  (SELECT *
   FROM {{ source('ecom', 'raw_products') }}), renamed AS
  (SELECT ----------  ids
 sku AS product_id, ---------- text
 name AS product_name,
 TYPE AS product_type,
         description AS product_description, ---------- numerics
 {{ cents_to_dollars('price') }} AS product_price, ---------- booleans
 coalesce(TYPE = 'jaffle', FALSE) AS is_food_item,
 coalesce(TYPE = 'beverage', FALSE) AS is_drink_item
   FROM SOURCE)
SELECT *
FROM renamed",,,False,False,stg,products,"{'models': [{'name': 'stg_products', 'description': 'Product (food and drink items that can be ordered) data with basic cleaning and transformation applied, one row per product.', 'columns': [{'name': 'product_id', 'description': 'The unique key for each product.', 'data_tests': ['not_null', 'unique']}]}]}","{'columns': {'product_id': ['not_null', 'unique']}, 'unit_tests': []}",True,['product_id'],True,False,product_id,,False,['cents_to_dollars'],True,[],True,['ecom.raw_products'],"['order_items', 'products']",False,"""Extracts product data from the 'raw_products' source table, renaming columns for clarity. It calculates the price in dollars and identifies food and drink items based on the product type. The output includes one row per product with essential attributes for further analysis.""",
models/staging/stg_supplies.sql,stg_supplies.sql,.sql,,"WITH SOURCE AS
  (SELECT *
   FROM {{ source('ecom', 'raw_supplies') }}), renamed AS
  (SELECT ----------  ids
 {{ dbt_utils.generate_surrogate_key(['id', 'sku']) }} AS supply_uuid,
                                                     id AS supply_id,
                                                     sku AS product_id, ---------- text
 name AS supply_name, ---------- numerics
 {{ cents_to_dollars('cost') }} AS supply_cost, ---------- booleans
 perishable AS is_perishable_supply
   FROM SOURCE)
SELECT *
FROM renamed",,,False,False,stg,supplies,"{'models': [{'name': 'stg_supplies', 'description': 'List of our supply expenses data with basic cleaning and transformation applied.\nOne row per supply cost, not per supply. As supply costs fluctuate they receive a new row with a new UUID. Thus there can be multiple rows per supply_id.\n', 'columns': [{'name': 'supply_uuid', 'description': 'The unique key of our supplies per cost.', 'data_tests': ['not_null', 'unique']}]}]}","{'columns': {'supply_uuid': ['not_null', 'unique']}, 'unit_tests': []}",True,"['product_id', 'supply_id']",True,False,supply_uuid,,False,"['cents_to_dollars', 'dbt_utils.generate_surrogate_key']",True,[],True,['ecom.raw_supplies'],"['order_items', 'supplies']",False,"Retrieves supply expense data from the 'raw_supplies' source table, applying basic transformations. It generates a unique identifier for each supply cost, converts costs from cents to dollars, and flags whether supplies are perishable. Each supply cost is represented by a new UUID, allowing multiple entries per supply ID.",
models/marts/customers.sql,customers.sql,.sql,,"WITH customers AS
  (SELECT *
   FROM {{ ref('stg_customers') }}),
     orders AS
  (SELECT *
   FROM {{ ref('orders') }}),
     customer_orders_summary AS
  (SELECT orders.customer_id,
          count(DISTINCT orders.order_id) AS count_lifetime_orders,
          count(DISTINCT orders.order_id) > 1 AS is_repeat_buyer,
          min(orders.ordered_at) AS first_ordered_at,
          max(orders.ordered_at) AS last_ordered_at,
          sum(orders.subtotal) AS lifetime_spend_pretax,
          sum(orders.tax_paid) AS lifetime_tax_paid,
          sum(orders.order_total) AS lifetime_spend
   FROM orders
   GROUP BY 1),
     joined AS
  (SELECT customers.*,
          customer_orders_summary.count_lifetime_orders,
          customer_orders_summary.first_ordered_at,
          customer_orders_summary.last_ordered_at,
          customer_orders_summary.lifetime_spend_pretax,
          customer_orders_summary.lifetime_tax_paid,
          customer_orders_summary.lifetime_spend,
          CASE
              WHEN customer_orders_summary.is_repeat_buyer THEN 'returning'
              ELSE 'new'
          END AS customer_type
   FROM customers
   LEFT JOIN customer_orders_summary ON customers.customer_id = customer_orders_summary.customer_id)
SELECT *
FROM joined",,,False,False,other,customers,"{'models': [{'name': 'customers', 'description': 'Customer overview data mart, offering key details for each unique customer. One row per customer.', 'data_tests': [{'dbt_utils.expression_is_true': {'expression': 'lifetime_spend_pretax + lifetime_tax_paid = lifetime_spend'}}], 'columns': [{'name': 'customer_id', 'description': 'The unique key of the orders mart.', 'data_tests': ['not_null', 'unique']}, {'name': 'customer_name', 'description': ""Customers' full name.""}, {'name': 'count_lifetime_orders', 'description': 'Total number of orders a customer has ever placed.'}, {'name': 'first_ordered_at', 'description': 'The timestamp when a customer placed their first order.'}, {'name': 'last_ordered_at', 'description': ""The timestamp of a customer's most recent order.""}, {'name': 'lifetime_spend_pretax', 'description': 'The sum of all the pre-tax subtotals of every order a customer has placed.'}, {'name': 'lifetime_tax_paid', 'description': 'The sum of all the tax portion of every order a customer has placed.'}, {'name': 'lifetime_spend', 'description': 'The sum of all the order totals (including tax) that a customer has ever placed.'}, {'name': 'customer_type', 'description': ""Options are 'new' or 'returning', indicating if a customer has ordered more than once or has only placed their first order to date."", 'data_tests': [{'accepted_values': {'values': ['new', 'returning']}}]}]}], 'semantic_models': [{'name': 'customers', 'defaults': {'agg_time_dimension': 'first_ordered_at'}, 'description': 'Customer grain mart.\n', 'model': ""ref('customers')"", 'entities': [{'name': 'customer', 'expr': 'customer_id', 'type': 'primary'}], 'dimensions': [{'name': 'customer_name', 'type': 'categorical'}, {'name': 'customer_type', 'type': 'categorical'}, {'name': 'first_ordered_at', 'type': 'time', 'type_params': {'time_granularity': 'day'}}, {'name': 'last_ordered_at', 'type': 'time', 'type_params': {'time_granularity': 'day'}}], 'measures': [{'name': 'customers', 'description': 'Count of unique customers', 'agg': 'count_distinct'}, {'name': 'count_lifetime_orders', 'description': 'Total count of orders per customer.', 'agg': 'sum'}, {'name': 'lifetime_spend_pretax', 'description': 'Customer lifetime spend before taxes.', 'agg': 'sum'}, {'name': 'lifetime_spend', 'agg': 'sum', 'description': 'Gross customer lifetime spend inclusive of taxes.'}]}], 'metrics': [{'name': 'lifetime_spend_pretax', 'description': ""Customer's lifetime spend before tax"", 'label': 'LTV Pre-tax', 'type': 'simple', 'type_params': {'measure': 'lifetime_spend_pretax'}}, {'name': 'count_lifetime_orders', 'description': 'Count of lifetime orders', 'label': 'Count Lifetime Orders', 'type': 'simple', 'type_params': {'measure': 'count_lifetime_orders'}}, {'name': 'average_order_value', 'description': 'LTV pre-tax / number of orders', 'label': 'Average Order Value', 'type': 'derived', 'type_params': {'metrics': ['count_lifetime_orders', 'lifetime_spend_pretax'], 'expr': 'lifetime_spend_pretax / count_lifetime_orders'}}], 'saved_queries': [{'name': 'customer_order_metrics', 'query_params': {'metrics': ['count_lifetime_orders', 'lifetime_spend_pretax', 'average_order_value'], 'group_by': [""Entity('customer')""]}, 'exports': [{'name': 'customer_order_metrics', 'config': {'export_as': 'table'}}]}]}","{'columns': {'customer_id': ['not_null', 'unique'], 'customer_type': [{'accepted_values': {'values': ['new', 'returning']}}]}, 'unit_tests': []}",True,"['customer_id', 'order_id']",True,True,customer_id,['customers.customer_id = customer_orders_summary.customer_id'],True,,False,"['stg_customers', 'orders']",False,,[],True,"""Aggregates customer data from the 'stg_customers' and 'orders' tables to summarize lifetime order metrics. It counts distinct orders, calculates total spend, and identifies repeat buyers. The results are joined by 'customer_id' and include fields like first and last order dates, categorized as 'new' or 'returning' customers.""",
models/marts/locations.sql,locations.sql,.sql,,"WITH locations AS
  (SELECT *
   FROM {{ ref('stg_locations') }})
SELECT *
FROM locations",,,False,False,other,locations,"{'semantic_models': [{'name': 'locations', 'description': 'Location dimension table. The grain of the table is one row per location.\n', 'model': ""ref('locations')"", 'defaults': {'agg_time_dimension': 'opened_at'}, 'entities': [{'name': 'location', 'type': 'primary', 'expr': 'location_id'}], 'dimensions': [{'name': 'location_name', 'type': 'categorical'}, {'name': 'opened_at', 'expr': 'opened_at', 'type': 'time', 'type_params': {'time_granularity': 'day'}}], 'measures': [{'name': 'average_tax_rate', 'description': 'Average tax rate.', 'expr': 'tax_rate', 'agg': 'average'}]}]}",,False,,True,False,,,False,,False,['stg_locations'],False,,[],True,"""Selects all records from the 'stg_locations' source table to create a location dimension table. Each row represents a unique location, with dimensions including 'location_name' and 'opened_at', and a measure for the average tax rate. The grain of the table is one row per location.""",
models/marts/metricflow_time_spine.sql,metricflow_time_spine.sql,.sql,,"-- metricflow_time_spine.sql
WITH days AS (--for BQ adapters use ""DATE('01/01/2000','mm/dd/yyyy')""
 {{ dbt_date.get_base_dates(n_dateparts=365*10, datepart=""day"") }}),
     cast_to_date AS
  (SELECT cast(date_day AS date) AS date_day
   FROM days)
SELECT *
FROM cast_to_date",,,False,False,other,metricflow_time_spine,,,False,,True,False,,,False,['dbt_date.get_base_dates'],True,[],False,,[],True,"Generates a date range spanning 10 years, starting from January 1, 2000. It casts each date from the generated list into a date format. The output includes all dates without any filters or aggregations applied.",
models/marts/order_items.sql,order_items.sql,.sql,,"WITH order_items AS
  (SELECT *
   FROM {{ ref('stg_order_items') }}),
     orders AS
  (SELECT *
   FROM {{ ref('stg_orders') }}),
     products AS
  (SELECT *
   FROM {{ ref('stg_products') }}),
     supplies AS
  (SELECT *
   FROM {{ ref('stg_supplies') }}),
     order_supplies_summary AS
  (SELECT product_id,
          sum(supply_cost) AS supply_cost
   FROM supplies
   GROUP BY 1),
     joined AS
  (SELECT order_items.*,
          orders.ordered_at,
          products.product_name,
          products.product_price,
          products.is_food_item,
          products.is_drink_item,
          order_supplies_summary.supply_cost
   FROM order_items
   LEFT JOIN orders ON order_items.order_id = orders.order_id
   LEFT JOIN products ON order_items.product_id = products.product_id
   LEFT JOIN order_supplies_summary ON order_items.product_id = order_supplies_summary.product_id)
SELECT *
FROM joined",,,False,False,other,order_items,"{'models': [{'name': 'order_items', 'columns': [{'name': 'order_item_id', 'data_tests': ['not_null', 'unique']}, {'name': 'order_id', 'data_tests': [{'relationships': {'to': ""ref('orders')"", 'field': 'order_id'}}]}]}], 'unit_tests': [{'name': 'test_supply_costs_sum_correctly', 'description': 'Test that the counts of drinks and food orders convert to booleans properly.', 'model': 'order_items', 'given': [{'input': ""ref('stg_supplies')"", 'rows': [{'product_id': 1, 'supply_cost': 4.5}, {'product_id': 2, 'supply_cost': 3.5}, {'product_id': 2, 'supply_cost': 5.0}]}, {'input': ""ref('stg_products')"", 'rows': [{'product_id': 1}, {'product_id': 2}]}, {'input': ""ref('stg_order_items')"", 'rows': [{'order_id': 1, 'product_id': 1}, {'order_id': 2, 'product_id': 2}, {'order_id': 2, 'product_id': 2}]}, {'input': ""ref('stg_orders')"", 'rows': [{'order_id': 1}, {'order_id': 2}]}], 'expect': {'rows': [{'order_id': 1, 'product_id': 1, 'supply_cost': 4.5}, {'order_id': 2, 'product_id': 2, 'supply_cost': 8.5}, {'order_id': 2, 'product_id': 2, 'supply_cost': 8.5}]}}], 'semantic_models': [{'name': 'order_item', 'defaults': {'agg_time_dimension': 'ordered_at'}, 'description': 'Items contatined in each order. The grain of the table is one row per order item.\n', 'model': ""ref('order_items')"", 'entities': [{'name': 'order_item', 'type': 'primary', 'expr': 'order_item_id'}, {'name': 'order_id', 'type': 'foreign', 'expr': 'order_id'}, {'name': 'product', 'type': 'foreign', 'expr': 'product_id'}], 'dimensions': [{'name': 'ordered_at', 'expr': 'ordered_at', 'type': 'time', 'type_params': {'time_granularity': 'day'}}, {'name': 'is_food_item', 'type': 'categorical'}, {'name': 'is_drink_item', 'type': 'categorical'}], 'measures': [{'name': 'revenue', 'description': 'The revenue generated for each order item. Revenue is calculated as a sum of revenue associated with each product in an order.', 'agg': 'sum', 'expr': 'product_price'}, {'name': 'food_revenue', 'description': 'The revenue generated for each order item. Revenue is calculated as a sum of revenue associated with each product in an order.', 'agg': 'sum', 'expr': 'case when is_food_item is true then product_price else 0 end'}, {'name': 'drink_revenue', 'description': 'The revenue generated for each order item. Revenue is calculated as a sum of revenue associated with each product in an order.', 'agg': 'sum', 'expr': 'case when is_drink_item is true then product_price else 0 end'}, {'name': 'median_revenue', 'description': 'The median revenue generated for each order item.', 'agg': 'median', 'expr': 'product_price'}]}], 'metrics': [{'name': 'revenue', 'description': 'Sum of the product revenue for each order item. Excludes tax.', 'type': 'simple', 'label': 'Revenue', 'type_params': {'measure': 'revenue'}}, {'name': 'order_cost', 'description': 'Sum of cost for each order item.', 'label': 'Order Cost', 'type': 'simple', 'type_params': {'measure': 'order_cost'}}, {'name': 'median_revenue', 'description': 'The median revenue for each order item. Excludes tax.', 'type': 'simple', 'label': 'Median Revenue', 'type_params': {'measure': 'median_revenue'}}, {'name': 'food_revenue', 'description': 'The revenue from food in each order', 'label': 'Food Revenue', 'type': 'simple', 'type_params': {'measure': 'food_revenue'}}, {'name': 'drink_revenue', 'description': 'The revenue from drinks in each order', 'label': 'Drink Revenue', 'type': 'simple', 'type_params': {'measure': 'drink_revenue'}}, {'name': 'food_revenue_pct', 'description': 'The % of order revenue from food.', 'label': 'Food Revenue %', 'type': 'ratio', 'type_params': {'numerator': 'food_revenue', 'denominator': 'revenue'}}, {'name': 'drink_revenue_pct', 'description': 'The % of order revenue from drinks.', 'label': 'Drink Revenue %', 'type': 'ratio', 'type_params': {'numerator': 'drink_revenue', 'denominator': 'revenue'}}, {'name': 'revenue_growth_mom', 'description': 'Percentage growth of revenue compared to 1 month ago. Excluded tax', 'type': 'derived', 'label': 'Revenue Growth % M/M', 'type_params': {'expr': '(current_revenue - revenue_prev_month)*100/revenue_prev_month', 'metrics': [{'name': 'revenue', 'alias': 'current_revenue'}, {'name': 'revenue', 'offset_window': '1 month', 'alias': 'revenue_prev_month'}]}}, {'name': 'order_gross_profit', 'description': 'Gross profit from each order.', 'type': 'derived', 'label': 'Order Gross Profit', 'type_params': {'expr': 'revenue - cost', 'metrics': [{'name': 'revenue'}, {'name': 'order_cost', 'alias': 'cost'}]}}, {'name': 'cumulative_revenue', 'description': 'The cumulative revenue for all orders.', 'label': 'Cumulative Revenue (All Time)', 'type': 'cumulative', 'type_params': {'measure': 'revenue'}}], 'saved_queries': [{'name': 'revenue_metrics', 'query_params': {'metrics': ['revenue', 'food_revenue', 'drink_revenue'], 'group_by': [""TimeDimension('metric_time', 'day')""]}, 'exports': [{'name': 'revenue_metrics', 'config': {'export_as': 'table'}}]}]}","{'columns': {'order_item_id': ['not_null', 'unique'], 'order_id': [{'relationships': {'to': ""ref('orders')"", 'field': 'order_id'}}]}, 'unit_tests': ['test_supply_costs_sum_correctly']}",True,"['product_id', 'order_id']",True,True,order_item_id,"['order_items.order_id = orders.order_id', 'order_items.product_id = products.product_id', 'order_items.product_id = order_supplies_summary.product_id']",True,,False,"['stg_order_items', 'stg_orders', 'stg_products', 'stg_supplies']",False,,['orders'],False,"""Combines order item details from 'stg_order_items' with order timestamps from 'stg_orders' and product information from 'stg_products'. It aggregates supply costs from 'stg_supplies' using SUM() and joins these datasets to provide a comprehensive view of each order item, including revenue metrics.""",
models/marts/orders.sql,orders.sql,.sql,,"WITH orders AS
  (SELECT *
   FROM {{ ref('stg_orders') }}),
     order_items AS
  (SELECT *
   FROM {{ ref('order_items') }}),
     order_items_summary AS
  (SELECT order_id,
          sum(supply_cost) AS order_cost,
          sum(product_price) AS order_items_subtotal,
          count(order_item_id) AS count_order_items,
          sum(CASE
                  WHEN is_food_item THEN 1
                  ELSE 0
              END) AS count_food_items,
          sum(CASE
                  WHEN is_drink_item THEN 1
                  ELSE 0
              END) AS count_drink_items
   FROM order_items
   GROUP BY 1),
     compute_booleans AS
  (SELECT orders.*,
          order_items_summary.order_cost,
          order_items_summary.order_items_subtotal,
          order_items_summary.count_food_items,
          order_items_summary.count_drink_items,
          order_items_summary.count_order_items,
          order_items_summary.count_food_items > 0 AS is_food_order,
          order_items_summary.count_drink_items > 0 AS is_drink_order
   FROM orders
   LEFT JOIN order_items_summary ON orders.order_id = order_items_summary.order_id),
     customer_order_count AS
  (SELECT *,
          row_number() OVER (PARTITION BY customer_id
                             ORDER BY ordered_at ASC) AS customer_order_number
   FROM compute_booleans)
SELECT *
FROM customer_order_count",,,False,False,other,orders,"{'models': [{'name': 'orders', 'description': ""Order overview data mart, offering key details for each order inlcluding if it's a customer's first order and a food vs. drink item breakdown. One row per order."", 'data_tests': [{'dbt_utils.expression_is_true': {'expression': 'order_items_subtotal = subtotal'}}, {'dbt_utils.expression_is_true': {'expression': 'order_total = subtotal + tax_paid'}}], 'columns': [{'name': 'order_id', 'description': 'The unique key of the orders mart.', 'data_tests': ['not_null', 'unique']}, {'name': 'customer_id', 'description': 'The foreign key relating to the customer who placed the order.', 'data_tests': [{'relationships': {'to': ""ref('stg_customers')"", 'field': 'customer_id'}}]}, {'name': 'order_total', 'description': 'The total amount of the order in USD including tax.'}, {'name': 'ordered_at', 'description': 'The timestamp the order was placed at.'}, {'name': 'order_cost', 'description': 'The sum of supply expenses to fulfill the order.'}, {'name': 'is_food_order', 'description': 'A boolean indicating if this order included any food items.'}, {'name': 'is_drink_order', 'description': 'A boolean indicating if this order included any drink items.'}]}], 'unit_tests': [{'name': 'test_order_items_compute_to_bools_correctly', 'description': 'Test that the counts of drinks and food orders convert to booleans properly.', 'model': 'orders', 'given': [{'input': ""ref('order_items')"", 'rows': [{'order_id': 1, 'order_item_id': 1, 'is_drink_item': False, 'is_food_item': True}, {'order_id': 1, 'order_item_id': 2, 'is_drink_item': True, 'is_food_item': False}, {'order_id': 2, 'order_item_id': 3, 'is_drink_item': False, 'is_food_item': True}]}, {'input': ""ref('stg_orders')"", 'rows': [{'order_id': 1}, {'order_id': 2}]}], 'expect': {'rows': [{'order_id': 1, 'count_food_items': 1, 'count_drink_items': 1, 'is_drink_order': True, 'is_food_order': True}, {'order_id': 2, 'count_food_items': 1, 'count_drink_items': 0, 'is_drink_order': False, 'is_food_order': True}]}}], 'semantic_models': [{'name': 'orders', 'defaults': {'agg_time_dimension': 'ordered_at'}, 'description': 'Order fact table. This table is at the order grain with one row per order.\n', 'model': ""ref('orders')"", 'entities': [{'name': 'order_id', 'type': 'primary'}, {'name': 'location', 'type': 'foreign', 'expr': 'location_id'}, {'name': 'customer', 'type': 'foreign', 'expr': 'customer_id'}], 'dimensions': [{'name': 'ordered_at', 'expr': 'ordered_at', 'type': 'time', 'type_params': {'time_granularity': 'day'}}, {'name': 'order_total_dim', 'type': 'categorical', 'expr': 'order_total'}, {'name': 'is_food_order', 'type': 'categorical'}, {'name': 'is_drink_order', 'type': 'categorical'}, {'name': 'customer_order_number', 'type': 'categorical'}], 'measures': [{'name': 'order_total', 'description': 'The total amount for each order including taxes.', 'agg': 'sum'}, {'name': 'order_count', 'expr': 1, 'agg': 'sum'}, {'name': 'tax_paid', 'description': 'The total tax paid on each order.', 'agg': 'sum'}, {'name': 'order_cost', 'description': 'The cost for each order item. Cost is calculated as a sum of the supply cost for each order item.', 'agg': 'sum'}]}], 'metrics': [{'name': 'order_total', 'description': 'Sum of total order amonunt. Includes tax + revenue.', 'type': 'simple', 'label': 'Order Total', 'type_params': {'measure': 'order_total'}}, {'name': 'new_customer_orders', 'description': ""New customer's first order count"", 'label': 'New Customers', 'type': 'simple', 'type_params': {'measure': 'order_count'}, 'filter': ""{{ Dimension('order_id__customer_order_number') }} = 1\n""}, {'name': 'large_orders', 'description': 'Count of orders with order total over 20.', 'type': 'simple', 'label': 'Large Orders', 'type_params': {'measure': 'order_count'}, 'filter': ""{{ Dimension('order_id__order_total_dim') }} >= 20\n""}, {'name': 'orders', 'description': 'Count of orders.', 'label': 'Orders', 'type': 'simple', 'type_params': {'measure': 'order_count'}}, {'name': 'food_orders', 'description': 'Count of orders that contain food order items', 'label': 'Food Orders', 'type': 'simple', 'type_params': {'measure': 'order_count'}, 'filter': ""{{ Dimension('order_id__is_food_order') }} = true\n""}, {'name': 'drink_orders', 'description': 'Count of orders that contain drink order items', 'label': 'Drink Orders', 'type': 'simple', 'type_params': {'measure': 'order_count'}, 'filter': ""{{ Dimension('order_id__is_drink_order') }} = true\n""}], 'saved_queries': [{'name': 'order_metrics', 'query_params': {'metrics': ['orders', 'new_customer_orders', 'order_total', 'food_orders', 'drink_orders'], 'group_by': [""TimeDimension('metric_time', 'day')""]}, 'exports': [{'name': 'order_metrics', 'config': {'export_as': 'table'}}]}]}","{'columns': {'order_id': ['not_null', 'unique'], 'customer_id': [{'relationships': {'to': ""ref('stg_customers')"", 'field': 'customer_id'}}]}, 'unit_tests': ['test_order_items_compute_to_bools_correctly']}",True,"['order_item_id', 'customer_id', 'order_id']",True,True,order_id,"['orders.order_id = order_items_summary.order_id), customer_order_count as ']",True,,False,"['stg_orders', 'order_items']",False,,['customers'],False,"""Aggregates order data from the 'stg_orders' and 'order_items' tables, calculating total costs, item counts, and distinguishing between food and drink items. It joins these summaries to the orders, determining if each order includes food or drinks, and ranks orders by customer to identify first-time purchases.""",
models/marts/products.sql,products.sql,.sql,,"WITH products AS
  (SELECT *
   FROM {{ ref('stg_products') }})
SELECT *
FROM products",,,False,False,other,products,"{'semantic_models': [{'name': 'products', 'description': 'Product dimension table. The grain of the table is one row per product.\n', 'model': ""ref('products')"", 'entities': [{'name': 'product', 'type': 'primary', 'expr': 'product_id'}], 'dimensions': [{'name': 'product_name', 'type': 'categorical'}, {'name': 'product_type', 'type': 'categorical'}, {'name': 'product_description', 'type': 'categorical'}, {'name': 'is_food_item', 'type': 'categorical'}, {'name': 'is_drink_item', 'type': 'categorical'}, {'name': 'product_price', 'type': 'categorical'}]}]}",,False,,True,False,,,False,,False,['stg_products'],False,,[],True,"""Selects all product records from the 'stg_products' source table, creating a product dimension table with one row per product. The table includes attributes such as product name, type, description, and pricing, categorized for analytical purposes.""",
models/marts/supplies.sql,supplies.sql,.sql,,"WITH supplies AS
  (SELECT *
   FROM {{ ref('stg_supplies') }})
SELECT *
FROM supplies",,,False,False,other,supplies,"{'semantic_models': [{'name': 'supplies', 'description': 'Supplies dimension table. The grain of the table is one row per supply and product combination.\n', 'model': ""ref('supplies')"", 'entities': [{'name': 'supply', 'type': 'primary', 'expr': 'supply_uuid'}], 'dimensions': [{'name': 'supply_id', 'type': 'categorical'}, {'name': 'product_id', 'type': 'categorical'}, {'name': 'supply_name', 'type': 'categorical'}, {'name': 'supply_cost', 'type': 'categorical'}, {'name': 'is_perishable_supply', 'type': 'categorical'}]}]}",,False,,True,False,,,False,,False,['stg_supplies'],False,,[],True,"""Selects all records from the 'stg_supplies' staging table to create a supplies dimension table. Each row represents a unique combination of supply and product, including attributes like supply ID, product ID, supply name, supply cost, and perishability status.""",
models/staging/__sources.yml,__sources.yml,.yml,,,"
{{
    config(
        materialized=""table""
    )
}}
",table,False,False,sources,sources,"{'version': 2, 'sources': [{'name': 'ecom', 'schema': 'raw', 'description': 'E-commerce data for the Jaffle Shop', 'freshness': {'warn_after': {'count': 24, 'period': 'hour'}}, 'tables': [{'name': 'raw_customers', 'description': 'One record per person who has purchased one or more items'}, {'name': 'raw_orders', 'description': 'One record per order (consisting of one or more order items)', 'loaded_at_field': 'ordered_at'}, {'name': 'raw_items', 'description': 'Items included in an order'}, {'name': 'raw_stores', 'loaded_at_field': 'opened_at'}, {'name': 'raw_products', 'description': 'One record per SKU for items sold in stores'}, {'name': 'raw_supplies', 'description': 'One record per supply per SKU of items sold in stores'}]}]}",,False,,False,False,,,False,,False,[],False,,[],True,"""Selects customer data from the 'raw_customers' table and joins with 'raw_orders' to filter for orders placed in the last 30 days. It counts the number of orders per customer and calculates the total order value using SUM(), grouping results by 'customer_id'.""",
